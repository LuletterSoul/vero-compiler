<var>::=<alphabet>|<alphabet><number_alphabet>
<number_alphabet>::=<number>|<alphabet>|<number><number_alphabet>|<alphabet><number_alphabet>
<keywords>::=const|Integer|Float|var|if|else|for|class|public|static|void|main|string|return|int|bool|while|for|System|Console|true|false|this|new|odd
<alphabet>::=a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|h|y|z|A|B|C|D|E|F|G|H|I|J|K|L|<_M>|<_N>|O|P|Q|R|S|T|U|V|W|X|Y|Z|刘|祥|德
<delimiter>::=,|;|(|)
<operator>::=+|-|*|/|=|++|&|&&|--|==|!=|>=|<=|>|<|%
<number>::=0|1|2|3|4|5|6|7|8|9
<integer>::=<unsigned_integer>|+<unsigned_integer>|-<unsigned_integer>
<unsigned_integer>::=<number>|<number><unsigned_integer>
<unsigned_number>::=.<decimal_fraction_number>|e<exponential_part>|<number><unsigned_number>
<decimal_fraction_number>::=<number>e<exponential_part>|<number><decimal_fraction_number>
<exponential_part>::=<unsigned_integer>|+<unsigned_integer>|-<unsigned_integer>
<self_op> ::= ++ | --
<h_logic_op> ::= &&
<ll_logic_op> ::= ||
<h_logic_op> ::= * | / | %
<l_math_op> ::= + | -
<judge_op> ::= == | != | >= | <= | > | <
<E'>::=<E>
<E>::=<program>
<program> ::= <type> main() <block>
<type> ::= int | bool | Integer | Float
<block> ::= { <statements> return <unsigned_number> ; }
<decl> ::= <type> <array> ;
<array> ::= <var> [ <unsigned_number> ] | <var> [ <var> ] | <var>
<statements> ::= <statements> <_M> <statement> | <statement>
<bool_value> ::= true | false
<statement> ::=<assignment> ;|<decl>| if ( <bool> ) <_M> <statement>| if ( <bool> ) <_M> <statement> <_N> else <_M> <statement>| while <_M> ( <bool> ) <_M> <statement>| for ( <for_a> ; <_M> <for_b> ; <for_c> ) <_M> <statement>| { <statement>s }
<for_a> ::= <assignment> | ε
<for_b> ::= <bool> | ε
<for_c> ::= <for_assignment> | ε
<assignment> ::= <l_array> = <bool> ; | <l_array> <self_op> ; | <self_op> <l_array> ;
<for_assignment> ::= <l_array> = <bool> ; | <l_array> <self_op> ; | <self_op> <l_array> ;
<factor> ::= ( <bool> ) | <array> | <unsigned_number> | <bool_value> | ! ( <bool> )
<h_expression> ::= <h_expression> <h_logic_op> <factor> | <factor>
<l_expression> ::= <l_expression> <l_math_op> <h_expression> | <h_expression>
<rel> ::= <rel> <judge_op> <l_expression> | <l_expression>
<h_rel> ::= <h_rel> <h_logic_op> <_M> <rel> | <rel>
<bool> ::= <bool> <ll_logic_op> <_M> <h_rel> | <h_rel>
<_M> ::= ε
<_N> ::= ε